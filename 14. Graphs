#include <iostream>
#include <vector>
#include <string>
#include <Windows.h>
#include <fstream>
using namespace std;

vector<int> creating(string path)
{
    vector<int> test;
    ifstream in(path);
    if (in.is_open())
    {
        int N;
        while (in >> N)
        {
            test.push_back(N);
        }
    }
    in.close();
    return test;
}

int** fillMatrix(vector<int> t)
{
    int** matrix = new int* [t[0]];

    for (int i = 0; i < t[0]; i++)
    {
        matrix[i] = new int[t[0]];
        for (int j = 0; j < t[0]; j++)
        {
            matrix[i][j] = 0;
        }
    }

    for (int i = 1; i < t.size() - 1; i += 2)
    {
        matrix[t[i] - 1][t[i + 1] - 1] = 1;
        matrix[t[i + 1] - 1][t[i] - 1] = 1;
    }

    return matrix;
}

void fillLSD(int* L, int* S, int* D, vector<int> t, int n, int m)
{
    int* U;
    U = new int[n];
    for (int i = 0; i < t.size(); i++)
    {
        if (t[i]) L[(int)(i / 5)]++;
    }

    S[0] = 0; U[0] = 0;
    for (int i = 1; i < n; i++)
    {
        U[i] = S[i] = S[i - 1] + L[i - 1];
    }

    for (int i = 0; i < t.size(); i++)
    {
        if (t[i])
        {
            int k = (int)(i / 5); D[U[k]] = i % 5; U[k]++;
        }
    }

    delete[] U;
}

void fillLSD(int* L, int* S, int* D, vector<int> t)
{
    for (int i = 2; i < 2 + t[0]; i++)
    {
        L[i - 2] = t[i];
    }
    for (int i = 2 + t[0]; i < 2 + t[0] + t[0]; i++)
    {
        S[i - (2 + t[0])] = t[i];
    }
    for (int i = 2 + 2 * t[0]; i < t.size(); i++)
    {
        D[i - (2 + 2 * t[0])] = t[i];
    }
}

int main()
{
    vector<int> t = creating("test.txt");

    int** matrix = fillMatrix(t);
    int v = t[0];

    ofstream out("answer1.txt");
    if (out.is_open())
    {
        for (int i = 0; i < v; i++)
        {
            for (int j = 0; j < v; j++)
            {
                out << matrix[i][j] << " ";
            }
            out << endl;
        }
    }
    out.close();
    delete[] matrix;
    t.clear();

    t = creating("answer1.txt");
    int* L, * S, * D, n, m;

    n = (int)sqrt(t.size());
    m = 0;
    for (int i = 0; i < t.size(); i++) if (t[i]) m++;
    m /= 2;

    D = new int[2 * m];
    S = new int[n];
    L = new int[n]; for (int i = 0; i < n; i++) L[i] = 0;

    fillLSD(L, S, D, t, n, m);


    ofstream out2("answer2.txt");
    if (out2.is_open())
    {
        out2 << n << " " << m << endl;
        for (int i = 0; i < n; i++)
        {
            out2 << L[i] << " ";
        }
        out2 << endl;
        for (int i = 0; i < n; i++)
        {
            out2 << S[i] << " ";
        }
        out2 << endl;
        for (int i = 0; i < 2 * m; i++)
        {
            out2 << D[i] << " ";
        }
        out2 << endl;
    }
    out2.close();
    delete[] L;
    delete[] S;
    delete[] D;
    t.clear();

    t = creating("answer2.txt");
    n = t[0]; m = t[1];

    D = new int[2 * m];
    S = new int[n];
    L = new int[n]; for (int i = 0; i < n; i++) L[i] = 0;

    fillLSD(L, S, D, t);

    ofstream out3("answer3.txt");
    if (out3.is_open())
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = S[i]; j < S[i] + L[i]; j++)
            {
                out3 << i + 1 << "-" << D[j] + 1 << endl;
            }
        }
    }
    out3.close();
    delete[] L;
    delete[] S;
    delete[] D;
    t.clear();
}
